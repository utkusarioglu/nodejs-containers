name: build-and-push

# on:
#   push:
#     tags:
#       - "**.**"
#       - "experiment/**/**/**"
#     paths:
#       - src/**
#       - .github/workflows/build-and-push.yml
#   workflow_dispatch:

env:
  CONTAINER_NAME: node-devcontainer
  CONTAINER_USERNAME: node
  CONTAINER_GROUP: 1000
  CACHE_TO_DEST: /tmp/.buildx-cache-new
  CACHE_FROM_SRC: /tmp/.buildx-cache
  TAG_FALLBACK_STRING: tag-unavailable

jobs:
  build-and-push:
    name: build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        images:
          - enabled: true
            imageTag: 20-slim
            dockerfile: src/Dockerfile.dev
            additionalFilesToWatch: ""
            readmeFile: src/DOCKER_README.md
          - enabled: true
            imageTag: 19-slim
            dockerfile: src/Dockerfile.dev
            additionalFilesToWatch: ""
            readmeFile: src/DOCKER_README.md
          - enabled: true
            imageTag: 18-slim
            dockerfile: src/Dockerfile.dev
            additionalFilesToWatch: ""
            readmeFile: src/DOCKER_README.md

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v25
        with:
          files: |
            ${{ matrix.images.dockerfile }}
            ${{ matrix.images.readmeFile }}
            ${{ matrix.images.additionalFilesToWatch }}
            .github/workflows/build-and-push.yml

      - name: Declare run state
        id: run_state
        run: |
          ref_type="${{ github.ref_type }}"
          enabled="${{ matrix.images.enabled }}"
          any_modified="${{ steps.changed_files.outputs.any_modified }}"
          event_name="${{ github.event_name }}"

          if [ "$ref_type" == tag ] && \
             [ "$enabled" == true ] && \
             ( \
               [ "$any_modified" == true ] || \
               [ "$event_name" == workflow_dispatch ] \
             );
          then
            echo "run_docker_build=true" >> $GITHUB_OUTPUT
            echo "::debug::Docker build will carry out as expected."
          else
            echo "run_docker_build=false" >> $GITHUB_OUTPUT
            echo "Docker build is cancelled as the required conditions for a run haven't been met"
          fi

          echo "Ref type: $ref_type"
          echo "Enabled: $enabled"
          echo "Any modified: $any_modified"
          echo "Event name: $event_name" 

      - name: Create variables
        id: variables
        shell: bash
        run: |
          image_name="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_NAME }}"
          repo_tag="${{ github.ref_name }}"
          image_tag=${{ matrix.images.imageTag }}.${repo_tag//\//-}
          dev_image_tag="${image_tag}"
          image_ref="${image_name}:${image_tag}"
          dev_image_ref="${image_name}:${dev_image_tag}"
          short_image_ref="${{ env.CONTAINER_NAME }}:${image_tag}"
          short_dev_image_ref="${{ env.CONTAINER_NAME }}:${dev_image_tag}"

          for i in \
            image_name \
            image_tag \
            dev_image_tag \
            image_ref \
            dev_image_ref \
            short_image_ref \
            short_dev_image_ref; 
          do 
            echo "$i=${!i}" >> $GITHUB_OUTPUT; 
          done

      - name: Set up Docker Buildx
        if: steps.run_state.outputs.run_docker_build == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: steps.run_state.outputs.run_docker_build == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build ${{ steps.variables.outputs.short_image_ref }}
        if: steps.run_state.outputs.run_docker_build == 'true'
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: .
          tags: ${{ steps.variables.outputs.image_ref }}
          file: ${{ matrix.images.dockerfile }}
          push: true
          pull: false
          cache-from: type=local,src=${{ env.CACHE_FROM_SRC }}
          cache-to: type=local,mode=max,dest=${{ env.CACHE_TO_DEST }}
          build-args: |
            IMAGE_TAG=${{ matrix.images.imageTag }}
            ROOT_PASS=${{ secrets.DOCKER_IMAGE_ROOT_PASS }}
            USERNAME=${{ env.CONTAINER_USERNAME }}
            GROUP=${{ env.CONTAINER_GROUP }}

      - name: Build devcontainer ${{ steps.variables.outputs.short_dev_image_ref }}
        if: steps.run_state.outputs.run_docker_build == 'true'
        id: devcontainer_build
        uses: devcontainers/ci@v0.2
        env:
          IMAGE_NAME: ${{ steps.variables.outputs.image_name }}
          IMAGE_TAG: ${{ steps.variables.outputs.image_tag }}
        with:
          imageName: ${{ steps.variables.outputs.image_name }}
          imageTag: ${{ steps.variables.outputs.image_tag }}
          subFolder: src
          runCmd: /scripts/devcontainer-check.sh

      - name: Push devcontainer ${{ steps.variables.outputs.short_dev_image_ref }}
        if: steps.run_state.outputs.run_docker_build == 'true'
        run: docker push ${{ steps.variables.outputs.image_ref }}

      - name: Set Docker Hub description
        if: steps.run_state.outputs.run_docker_build == 'true'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ steps.variables.outputs.image_name }}
          short-description: NodeJS devcontainers
          readme-filepath: ${{ matrix.images.readmeFile }}

      - name: Move cache
        run: |
          rm -rf ${{ env.CACHE_FROM_SRC }}
          if [ -d ${{ env.CACHE_FROM_SRC }} ];
          then
            mv ${{ env.CACHE_TO_DEST }} ${{ env.CACHE_FROM_SRC }}
          fi
